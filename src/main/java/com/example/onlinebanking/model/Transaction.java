package com.example.onlinebanking.model;

import jakarta.persistence.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * Represents a financial transaction within the banking system.
 * This entity is used to store details about transactions such as deposits, withdrawals, and transfers.
 * Each transaction is associated with one or more accounts, depending on the type of transaction.
 *
 * @author Your Name
 * @version 1.0
 * @since 2023-10-01
 */
@Entity
public class Transaction {

    /**
     * Unique identifier for the transaction.
     * This value is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The amount of money involved in the transaction.
     * This value cannot be null.
     */
    @Column(nullable = false)
    private BigDecimal amount;

    /**
     * The type of transaction.
     * Possible values are: DEPOSIT, WITHDRAWAL, TRANSFER.
     * This value cannot be null.
     */
    @Column(nullable = false)
    private String type;

    /**
     * The date and time when the transaction occurred.
     * This value cannot be null.
     */
    @Column(nullable = false)
    private LocalDateTime timestamp;

    /**
     * The account from which the transaction originated.
     * This is applicable for WITHDRAWAL and TRANSFER types.
     * This field is optional and can be null for DEPOSIT transactions.
     */
    @ManyToOne
    @JoinColumn(name = "from_account_id")
    private Account fromAccount;

    /**
     * The account to which the transaction is directed.
     * This is applicable for DEPOSIT and TRANSFER types.
     * This field is optional and can be null for WITHDRAWAL transactions.
     */
    @ManyToOne
    @JoinColumn(name = "to_account_id")
    private Account toAccount;

    /**
     * Gets the unique identifier of the transaction.
     *
     * @return the transaction ID.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the transaction.
     *
     * @param id the transaction ID to set.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the amount of money involved in the transaction.
     *
     * @return the transaction amount.
     */
    public BigDecimal getAmount() {
        return amount;
    }

    /**
     * Sets the amount of money involved in the transaction.
     *
     * @param amount the transaction amount to set.
     */
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    /**
     * Gets the type of transaction.
     *
     * @return the transaction type.
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the type of transaction.
     *
     * @param type the transaction type to set.
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Gets the date and time when the transaction occurred.
     *
     * @return the transaction timestamp.
     */
    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the date and time when the transaction occurred.
     *
     * @param timestamp the transaction timestamp to set.
     */
    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Gets the account from which the transaction originated.
     *
     * @return the originating account.
     */
    public Account getFromAccount() {
        return fromAccount;
    }

    /**
     * Sets the account from which the transaction originated.
     *
     * @param fromAccount the originating account to set.
     */
    public void setFromAccount(Account fromAccount) {
        this.fromAccount = fromAccount;
    }

    /**
     * Gets the account to which the transaction is directed.
     *
     * @return the destination account.
     */
    public Account getToAccount() {
        return toAccount;
    }

    /**
     * Sets the account to which the transaction is directed.
     *
     * @param toAccount the destination account to set.
     */
    public void setToAccount(Account toAccount) {
        this.toAccount = toAccount;
    }
}